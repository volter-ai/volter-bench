timestamp,run_id,agent_id,ladder,run,status,error,traceback
2024-09-17 11:51:20,36a86517-6b8a-4be8-8fa1-9743ee15cf47,OneShotCoreAgent,creature_battler_01,2,success,,
2024-09-17 11:51:22,b7ceb866-f7d5-4827-928d-3b30a2be278f,OneShotCoreAgent,creature_battler_01,1,success,,
2024-09-17 11:51:27,f441495a-7ab7-4a95-804e-db57bdc2d1d1,OneShotCoreAgent,creature_battler_03,1,success,,
2024-09-17 11:51:28,61d37be3-bfbb-4be3-b2fc-3ab0bfab1a4c,OneShotCoreAgent,creature_battler_02,2,success,,
2024-09-17 11:51:37,0c15623d-b26b-4fe4-b57c-8f38f11d429b,OneShotCoreAgent,creature_battler_01,3,success,,
2024-09-17 11:51:37,13177256-2943-428d-85a1-473e18fe31ec,OneShotCoreAgent,creature_battler_03,2,success,,
2024-09-17 11:51:43,34f24a2b-9526-4e9b-820a-2e2110a4ece7,OneShotCoreAgent,creature_battler_03,3,success,,
2024-09-17 11:55:55,1b8a167f-d35c-4326-b560-a955bee5726f,OneShotCoreAgent,creature_battler_04,2,success,,
2024-09-17 11:55:57,4fc9d285-d97a-4818-889d-cf94b5d3d796,OneShotCoreAgent,creature_battler_02,1,success,,
2024-09-17 11:55:57,fcb3742c-990d-4cd9-a89a-06f80463840c,OneShotCoreAgent,creature_battler_02,3,success,,
2024-09-17 11:55:57,99d5c6aa-83c8-4bbc-bbfc-999eabd14741,OneShotCoreAgent,creature_battler_04,3,success,,
2024-09-17 11:56:25,152bcaea-2afc-4ce6-a46f-65e90258c1f3,OneShotCoreAgent,creature_battler_04,1,success,,
2024-09-17 12:00:11,85baebf3-1c42-43ea-95c5-6d4cbe8ef8ad,OneShotCoreAgent,creature_battler_05,3,failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/one_shot_gen/one_shot_core.py"", line 69, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 261, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/game/pytest_runner_agent/logic.py"", line 27, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 119, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 20, in execute_agent
    asyncio.run(agent.execute())
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py"", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/one_shot_gen/one_shot_core.py"", line 76, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

"
2024-09-17 12:01:15,c602c55c-d37e-48b9-8e50-cf97db0b41a5,OneShotCoreAgent,creature_battler_05,2,success,,
2024-09-17 12:01:25,586cdf0e-8dc5-4c4f-86de-b1462de4ee2a,OneShotCoreAgent,creature_battler_05,1,success,,
