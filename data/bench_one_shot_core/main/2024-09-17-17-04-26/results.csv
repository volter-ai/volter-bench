timestamp,run_id,agent_id,ladder,run,status,error,traceback,logs,project_directory
2024-09-17 17:04:41,268fd77f-4eca-455c-a53e-a93b8f179440,OneShotCoreAgent,creature_battler_01,1,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_8919'],ladder/creature_battler_01_1/main_game
2024-09-17 17:04:42,7d561369-b8c7-4dc4-ab9a-618b09f076b3,OneShotCoreAgent,creature_battler_02,2,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_7368'],ladder/creature_battler_02_2/main_game
2024-09-17 17:04:42,9086b6aa-4c58-44a2-a83d-7a05b32a592d,OneShotCoreAgent,creature_battler_03,2,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_2455'],ladder/creature_battler_03_2/main_game
2024-09-17 17:04:42,8c6c666c-1329-4c9e-b3d7-24cd8f396a30,OneShotCoreAgent,creature_battler_01,3,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_5055'],ladder/creature_battler_01_3/main_game
2024-09-17 17:04:42,7a944e98-40e5-4064-9675-ac56b07f1050,OneShotCoreAgent,creature_battler_03,3,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_4791'],ladder/creature_battler_03_3/main_game
2024-09-17 17:04:42,6734358f-b42d-4ae8-8192-3ae3dbc7f949,OneShotCoreAgent,creature_battler_03,1,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_4966'],ladder/creature_battler_03_1/main_game
2024-09-17 17:04:42,7388f648-8a94-418a-be33-08b1b5a0385c,OneShotCoreAgent,creature_battler_04,1,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_7508'],ladder/creature_battler_04_1/main_game
2024-09-17 17:04:43,2a0c6897-8ed7-47fa-95d4-d355abc1c77f,OneShotCoreAgent,creature_battler_01,2,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_7779'],ladder/creature_battler_01_2/main_game
2024-09-17 17:04:45,ac50c2de-25a8-4b8c-9999-c1df5973a894,OneShotCoreAgent,creature_battler_02,1,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_3598'],ladder/creature_battler_02_1/main_game
2024-09-17 17:04:45,7930b79b-4458-47bd-b492-15278ba7de29,OneShotCoreAgent,creature_battler_04,3,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_7587'],ladder/creature_battler_04_3/main_game
2024-09-17 17:04:45,77196842-1144-4a31-8c28-7d5da7333e53,OneShotCoreAgent,creature_battler_04,2,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_9882'],ladder/creature_battler_04_2/main_game
2024-09-17 17:04:46,2cfefb12-800d-4d45-a689-90326b921021,OneShotCoreAgent,creature_battler_02,3,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_8756'],ladder/creature_battler_02_3/main_game
2024-09-17 17:04:59,69ea41d6-7987-4ccd-9bae-4e93cf5ebec7,OneShotCoreAgent,creature_battler_05,2,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_7368'],ladder/creature_battler_05_2/main_game
2024-09-17 17:05:00,bd920772-346c-4221-8d3d-5d95dbac0e83,OneShotCoreAgent,creature_battler_05,1,success,,,['new_prompt_logs/OneShotCoreAgent_1726607072_8919'],ladder/creature_battler_05_1/main_game
2024-09-17 17:05:00,3e7a03c9-065b-4990-8f8a-392cb1e12cae,OneShotCoreAgent,creature_battler_05,3,failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/one_shot_gen/one_shot_core.py"", line 69, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 261, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/game/pytest_runner_agent/logic.py"", line 27, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 119, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 86, in execute_agent
    asyncio.run(agent.execute())
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py"", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/Users/yueranyuan/volter/volter-monorepo/packages/lib-volter-mge2/mge_agents/one_shot_gen/one_shot_core.py"", line 76, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform darwin -- Python 3.11.6, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: asyncio-0.23.8, html-3.2.0, env-1.1.3, metadata-3.1.1, cov-4.1.0, anyio-4.4.0, timeout-2.3.1, sugar-0.9.7
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Bubwool used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 4 damage!'}
Default Player swapped to Dumbird!
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 13 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
Dumbird has fainted! Choose a new creature:
Default Player swapped to Bubwool!
Bubwool used Tackle and dealt 9 damage!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:507: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:394: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:609: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:642: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:36: in run
    self.resolve_turn(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = ('Attack', <main_game.models.Skill object at 0x[REDACTED]>)
bot_action = None

    def resolve_turn(self, player_action, bot_action):
        actions = [
            (self.player, player_action),
            (self.bot, bot_action)
        ]
    
        # Sort by speed, with random tiebreaker
        actions.sort(key=lambda x: (x[0].active_creature.speed, random.random()), reverse=True)
    
        for actor, action in actions:
>           if action[0] == ""Swap"":
E           TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:99: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Dumbird used Tackle and dealt 1 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle and dealt 5 damage!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle and dealt 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle and dealt 1 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball and dealt 2 damage!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle and dealt 9 damage!'}
Dumbird used Tackle and dealt 1 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",['new_prompt_logs/OneShotCoreAgent_1726607072_2455'],ladder/creature_battler_05_3/main_game
