timestamp,run_id,agent_id,ladder,run,status,error,traceback,logs,project_directory,commit_url,branch_name,project_type,override_model,strong_completion_model,base_chat_completion_model,fast_chat_completion_model,strong_coding_completion_model
2024-11-15 14:19:27,a502b02d-a835-4d63-8e08-43b37592bb5c,OneShotCoreAgent,creature_battler_01,1,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_01_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:19:51,99afe27a-e0ce-4df1-b12c-b4f046cc15b9,OneShotCoreAgent,creature_battler_01,3,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_01_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:19:55,89e0d171-d8d3-49ed-9459-f60c0024dd19,OneShotCoreAgent,creature_battler_01,5,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_01_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:20:01,2e662239-6573-4171-9d87-43274a419b47,OneShotCoreAgent,creature_battler_01,4,success,,,['new_prompt_logs/999999_962358_OneShotCoreAgent'],ladder/creature_battler_01_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:20:04,e04c433b-2484-4dc7-9402-b5d2a77667fc,OneShotCoreAgent,creature_battler_01,6,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_01_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:20:10,5c039c42-f01e-4754-993a-d464964b0b1e,OneShotCoreAgent,creature_battler_01,2,success,,,['new_prompt_logs/999994_397051_OneShotCoreAgent'],ladder/creature_battler_01_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:23,5052917c-f72e-40f0-9f38-cdd9d0ef84de,OneShotCoreAgent,creature_battler_01,7,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_01_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:28,9f5f0bbc-077a-4292-90b4-f2905aba726b,OneShotCoreAgent,creature_battler_02,1,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_02_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:33,75a60722-51a9-4d8b-afd5-f483871c02a3,OneShotCoreAgent,creature_battler_02,4,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_02_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:36,6eb3ee94-ea44-4e41-939b-9f86410febe7,OneShotCoreAgent,creature_battler_02,2,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_02_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:38,75fc7d78-ef42-448d-b05b-7ddbc794781c,OneShotCoreAgent,creature_battler_02,3,success,,,['new_prompt_logs/999999_962358_OneShotCoreAgent'],ladder/creature_battler_02_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:21:51,75619c3e-6689-4de7-9b69-3a074149e5b6,OneShotCoreAgent,creature_battler_02,5,success,,,['new_prompt_logs/999994_397051_OneShotCoreAgent'],ladder/creature_battler_02_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:22:56,08075f2c-ac70-4209-8051-0f55870a2aec,OneShotCoreAgent,creature_battler_02,6,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_02_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:23:09,9426ba27-bc32-402b-b399-b52e335c14af,OneShotCoreAgent,creature_battler_02,7,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_02_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:23:21,2a5af63d-81e9-4bdb-a12d-17a6d51aa159,OneShotCoreAgent,creature_battler_03,2,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_03_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:23:23,b4dee77f-861a-4335-86ab-69d323b1eacf,OneShotCoreAgent,creature_battler_03,1,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_03_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:23:41,3a6058b5-c396-4176-9f8f-abff9dff4e5a,OneShotCoreAgent,creature_battler_03,3,success,,,['new_prompt_logs/999999_962358_OneShotCoreAgent'],ladder/creature_battler_03_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:23:54,06fe797b-8d48-435b-ac24-57e85a142bf5,OneShotCoreAgent,creature_battler_03,4,success,,,['new_prompt_logs/999994_397051_OneShotCoreAgent'],ladder/creature_battler_03_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:24:37,969e6839-6a85-410d-aee0-0ea8016d6ca5,OneShotCoreAgent,creature_battler_03,5,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_03_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:24:56,263eb45b-56f1-4372-bb62-a3d7cb154102,OneShotCoreAgent,creature_battler_03,6,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_03_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:25:13,f55e9cec-2ceb-40d2-b7c3-1baf87bba2b5,OneShotCoreAgent,creature_battler_03,7,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_03_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:25:27,40631236-f446-414a-aac4-102512740af5,OneShotCoreAgent,creature_battler_04,1,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_04_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:25:53,788542da-fcbe-453b-bea8-fe3ff8bab0b4,OneShotCoreAgent,creature_battler_04,3,success,,,['new_prompt_logs/999994_397051_OneShotCoreAgent'],ladder/creature_battler_04_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:25:59,bdd4916a-36cc-45e0-ad48-0b3a1d0ab704,OneShotCoreAgent,creature_battler_04,2,success,,,['new_prompt_logs/999999_962358_OneShotCoreAgent'],ladder/creature_battler_04_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:26:37,75e7c377-e488-4a0b-9d3f-004af95de59c,OneShotCoreAgent,creature_battler_04,4,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_04_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:26:51,42eedc85-432d-4b0f-9ff3-f75abf290aa6,OneShotCoreAgent,creature_battler_04,5,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_04_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:27:27,181d45f9-9079-444f-bb3f-88a18caa4261,OneShotCoreAgent,creature_battler_04,6,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_04_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:27:40,9b6e91ed-d9f5-4b40-a0d6-8eefc9fef131,OneShotCoreAgent,creature_battler_04,7,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_04_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:29:28,e8d78416-2555-4f37-8e59-6f56b8eb69e6,OneShotCoreAgent,creature_battler_05,5,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_05_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:29:44,3dc00030-02ee-477f-ae89-d0f81cee4cef,OneShotCoreAgent,creature_battler_05,2,success,,,['new_prompt_logs/999999_962358_OneShotCoreAgent'],ladder/creature_battler_05_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:30:11,beca8598-0582-4f3b-b9b7-20d29ad24f8e,OneShotCoreAgent,creature_battler_05,6,success,,,['new_prompt_logs/999998_713225_OneShotCoreAgent'],ladder/creature_battler_05_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:30:13,bd430e75-67af-45b8-94dd-c8e2afd0469f,OneShotCoreAgent,creature_battler_05,1,failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: time-machine-2.16.0, html-3.2.0, cov-4.1.0, anyio-4.6.2.post1, Faker-30.10.0, metadata-3.1.1, timeout-2.3.1, sugar-0.9.7, asyncio-0.23.8
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

    def run(self):
        try:
            while True:
                # Player turn
>               player_action = self.get_turn_action(self.player)

main_game/scenes/main_game_scene.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
>           return self.choose_attack(player)

main_game/scenes/main_game_scene.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_attack(self, player):
        choices = [SelectThing(skill) for skill in player.active_creature.skills]
        back_button = Button(""Back"")
        choices.append(back_button)
    
>       choice = self._wait_for_choice(player, choices)

main_game/scenes/main_game_scene.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = [SelectThing(Skill(tackle)), Button(Back)]

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
        assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
        # hidden
        self._app._show_changes()
        # hidden
        if isinstance(self, AbstractMultiplayerScene):
            for p in self.players:
                if p != player:
                    p._listener.on_show_event(event_type=""OnGamePending"",
                                              event_data=OnGamePending(text=f""Waiting for {player}..."").model_dump()
                                              )
    
        # hidden
        if self._app.persistence_client:
            self._app.persistence_client.store(
                # TODO: optimize; there is no need to serialize the entire stack most of the time:
                deep_serialize(self._app._scene_stack), next_scene_name="""", checkpoint=""choice""
            )
        else:
            pass
        # print(f""{self.__class__.__name__}:_wait_for_choice({player.display_name}, {str(choices)})"")
>       choice = player._listener.on_wait_for_choice(self, choices)

../../../../mge2/mini_game_engine/engine/lib.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <mini_game_engine.engine.lib.HumanListener object at 0x[REDACTED]>
scene = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
choices = [SelectThing(Skill(tackle)), Button(Back)]

    def on_wait_for_choice(self, scene: ""AbstractGameScene"", choices: List[AbstractChoice]) -> AbstractChoice:
        if HumanListener.random_mode or self.random_mode:
            assert str(scene)
            self.random_mode_counter -= 1
            if self.random_mode_counter <= 0:
>               raise RandomModeGracefulExit()
E               mini_game_engine.engine.lib.RandomModeGracefulExit: HumanListener is in random mode and the current run is now over. This is exception is expected

../../../../mge2/mini_game_engine/engine/lib.py:342: RandomModeGracefulExit

During handling of the above exception, another exception occurred:

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition:
                try:
>                   scene.run()

main_game/tests/test_main_game_scene.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:62: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Foe swapped to Dumbird!
Dumbird used Tackle for 4 damage!
Bubwool used Tackle for 9 damage!
You swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
You swapped to Bubwool!
You swapped to Dumbird!
You swapped to Bubwool!
Foe swapped to Scizard!
You swapped to Dumbird!
Foe swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
Foe swapped to Scizard!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 274, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: time-machine-2.16.0, html-3.2.0, cov-4.1.0, anyio-4.6.2.post1, Faker-30.10.0, metadata-3.1.1, timeout-2.3.1, sugar-0.9.7, asyncio-0.23.8
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

    def run(self):
        try:
            while True:
                # Player turn
>               player_action = self.get_turn_action(self.player)

main_game/scenes/main_game_scene.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
>           return self.choose_attack(player)

main_game/scenes/main_game_scene.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_attack(self, player):
        choices = [SelectThing(skill) for skill in player.active_creature.skills]
        back_button = Button(""Back"")
        choices.append(back_button)
    
>       choice = self._wait_for_choice(player, choices)

main_game/scenes/main_game_scene.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = [SelectThing(Skill(tackle)), Button(Back)]

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
        assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
        # hidden
        self._app._show_changes()
        # hidden
        if isinstance(self, AbstractMultiplayerScene):
            for p in self.players:
                if p != player:
                    p._listener.on_show_event(event_type=""OnGamePending"",
                                              event_data=OnGamePending(text=f""Waiting for {player}..."").model_dump()
                                              )
    
        # hidden
        if self._app.persistence_client:
            self._app.persistence_client.store(
                # TODO: optimize; there is no need to serialize the entire stack most of the time:
                deep_serialize(self._app._scene_stack), next_scene_name="""", checkpoint=""choice""
            )
        else:
            pass
        # print(f""{self.__class__.__name__}:_wait_for_choice({player.display_name}, {str(choices)})"")
>       choice = player._listener.on_wait_for_choice(self, choices)

../../../../mge2/mini_game_engine/engine/lib.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <mini_game_engine.engine.lib.HumanListener object at 0x[REDACTED]>
scene = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
choices = [SelectThing(Skill(tackle)), Button(Back)]

    def on_wait_for_choice(self, scene: ""AbstractGameScene"", choices: List[AbstractChoice]) -> AbstractChoice:
        if HumanListener.random_mode or self.random_mode:
            assert str(scene)
            self.random_mode_counter -= 1
            if self.random_mode_counter <= 0:
>               raise RandomModeGracefulExit()
E               mini_game_engine.engine.lib.RandomModeGracefulExit: HumanListener is in random mode and the current run is now over. This is exception is expected

../../../../mge2/mini_game_engine/engine/lib.py:342: RandomModeGracefulExit

During handling of the above exception, another exception occurred:

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition:
                try:
>                   scene.run()

main_game/tests/test_main_game_scene.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:62: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Foe swapped to Dumbird!
Dumbird used Tackle for 4 damage!
Bubwool used Tackle for 9 damage!
You swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
You swapped to Bubwool!
You swapped to Dumbird!
You swapped to Bubwool!
Foe swapped to Scizard!
You swapped to Dumbird!
Foe swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
Foe swapped to Scizard!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: time-machine-2.16.0, html-3.2.0, cov-4.1.0, anyio-4.6.2.post1, Faker-30.10.0, metadata-3.1.1, timeout-2.3.1, sugar-0.9.7, asyncio-0.23.8
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

    def run(self):
        try:
            while True:
                # Player turn
>               player_action = self.get_turn_action(self.player)

main_game/scenes/main_game_scene.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
            return self.choose_attack(player)
        else:
>           return self.choose_swap(player)

main_game/scenes/main_game_scene.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_swap(self, player):
        available = [c for c in player.creatures if c != player.active_creature and self.current_hp[c.uid] > 0]
        choices = [SelectThing(creature) for creature in available]
        back_button = Button(""Back"")
        choices.append(back_button)
    
        choice = self._wait_for_choice(player, choices)
        if choice == back_button:
>           return self.get_turn_action(player)

main_game/scenes/main_game_scene.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def get_turn_action(self, player):
        if self.current_hp[player.active_creature.uid] <= 0:
            return self.force_swap(player)
    
        attack_button = Button(""Attack"")
        swap_button = Button(""Swap"")
    
        choice = self._wait_for_choice(player, [attack_button, swap_button])
    
        if choice == attack_button:
>           return self.choose_attack(player)

main_game/scenes/main_game_scene.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player

    def choose_attack(self, player):
        choices = [SelectThing(skill) for skill in player.active_creature.skills]
        back_button = Button(""Back"")
        choices.append(back_button)
    
>       choice = self._wait_for_choice(player, choices)

main_game/scenes/main_game_scene.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = [SelectThing(Skill(tackle)), Button(Back)]

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
        assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
        # hidden
        self._app._show_changes()
        # hidden
        if isinstance(self, AbstractMultiplayerScene):
            for p in self.players:
                if p != player:
                    p._listener.on_show_event(event_type=""OnGamePending"",
                                              event_data=OnGamePending(text=f""Waiting for {player}..."").model_dump()
                                              )
    
        # hidden
        if self._app.persistence_client:
            self._app.persistence_client.store(
                # TODO: optimize; there is no need to serialize the entire stack most of the time:
                deep_serialize(self._app._scene_stack), next_scene_name="""", checkpoint=""choice""
            )
        else:
            pass
        # print(f""{self.__class__.__name__}:_wait_for_choice({player.display_name}, {str(choices)})"")
>       choice = player._listener.on_wait_for_choice(self, choices)

../../../../mge2/mini_game_engine/engine/lib.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <mini_game_engine.engine.lib.HumanListener object at 0x[REDACTED]>
scene = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
choices = [SelectThing(Skill(tackle)), Button(Back)]

    def on_wait_for_choice(self, scene: ""AbstractGameScene"", choices: List[AbstractChoice]) -> AbstractChoice:
        if HumanListener.random_mode or self.random_mode:
            assert str(scene)
            self.random_mode_counter -= 1
            if self.random_mode_counter <= 0:
>               raise RandomModeGracefulExit()
E               mini_game_engine.engine.lib.RandomModeGracefulExit: HumanListener is in random mode and the current run is now over. This is exception is expected

../../../../mge2/mini_game_engine/engine/lib.py:342: RandomModeGracefulExit

During handling of the above exception, another exception occurred:

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition:
                try:
>                   scene.run()

main_game/tests/test_main_game_scene.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:62: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
Foe swapped to Dumbird!
Dumbird used Tackle for 4 damage!
Bubwool used Tackle for 9 damage!
You swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
You swapped to Bubwool!
You swapped to Dumbird!
You swapped to Bubwool!
Foe swapped to Scizard!
You swapped to Dumbird!
Foe swapped to Dumbird!
Dumbird used Tackle for 5 damage!
Dumbird used Tackle for 5 damage!
Foe swapped to Scizard!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",['new_prompt_logs/999994_397051_OneShotCoreAgent'],ladder/creature_battler_05_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:30:39,06d6d578-8eff-4fe0-be4c-4c2e3986284c,OneShotCoreAgent,creature_battler_05,4,success,,,['new_prompt_logs/999997_590190_OneShotCoreAgent'],ladder/creature_battler_05_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:31:44,1dd9570e-c248-4a4d-8ab6-9995d0c9b1ae,OneShotCoreAgent,creature_battler_05,3,success,,,['new_prompt_logs/999996_562437_OneShotCoreAgent'],ladder/creature_battler_05_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
2024-11-15 14:33:12,d7ed5798-d993-40a6-84c4-ad804b28565a,OneShotCoreAgent,creature_battler_05,7,success,,,['new_prompt_logs/999995_223421_OneShotCoreAgent'],ladder/creature_battler_05_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/34360bdb9bae2fa471b4a25ec284dd449c4f4499/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20241022
