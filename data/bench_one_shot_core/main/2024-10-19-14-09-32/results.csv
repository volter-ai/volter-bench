timestamp,run_id,agent_id,ladder,run,status,error,traceback,logs,project_directory,commit_url,project_type
2024-10-19 14:11:34,fcb95409-06b9-4f04-8443-f916dbba09cd,OneShotCoreAgent,creature_battler_01,2,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_01_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:13:05,e5fee6d3-6a58-4e9e-a5f9-74d1fc121ff2,OneShotCoreAgent,creature_battler_01,1,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_01_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:13:38,dd538f00-4fe2-4691-91c2-8e227c04da79,OneShotCoreAgent,creature_battler_01,3,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_01_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:14:42,d174c271-ee79-4e94-91ec-210f920c1d69,OneShotCoreAgent,creature_battler_01,4,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_01_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:15:35,5a59b614-c454-4a65-bc3e-c5e0f2d771bd,OneShotCoreAgent,creature_battler_01,5,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_01_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:16:15,f6b44f11-1679-4347-8c42-82311b17425a,OneShotCoreAgent,creature_battler_01,6,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_01_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:18:16,63cdabce-fed7-4396-a11f-f5f75a15b24b,OneShotCoreAgent,creature_battler_01,7,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_01_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:18:25,a18fccd3-f2f5-4c4d-9027-ed6893a949d2,OneShotCoreAgent,creature_battler_02,1,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_02_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:20:17,ba05f442-6c26-4f2e-9581-4fd3ea2331f2,OneShotCoreAgent,creature_battler_02,2,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_02_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:20:40,9364117e-65fb-4bd1-a493-74effac36126,OneShotCoreAgent,creature_battler_02,3,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_02_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:22:31,f4b76dc0-15a9-4295-876a-59962c490362,OneShotCoreAgent,creature_battler_02,4,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_02_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:22:51,85ded3e6-131c-43df-bec2-2309432cecf6,OneShotCoreAgent,creature_battler_02,5,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_02_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:24:38,98a42f7e-5e82-4b20-a072-6c82d4c70766,OneShotCoreAgent,creature_battler_02,6,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_02_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:25:06,23028410-954d-434c-ae9a-cbd9a2ab2342,OneShotCoreAgent,creature_battler_02,7,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_02_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:28:05,2f8a360c-7937-4e2b-bcc8-0ab0c3bd10ac,OneShotCoreAgent,creature_battler_03,1,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_03_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:29:22,e3f2ad0e-66b8-43d9-a89d-651cb0ea8e09,OneShotCoreAgent,creature_battler_03,2,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_03_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:30:05,8caf7043-35cb-412e-b298-e12e8cdee7b4,OneShotCoreAgent,creature_battler_03,3,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_03_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:31:58,9bc718e4-d765-4220-9e18-fb0f14ea18be,OneShotCoreAgent,creature_battler_03,4,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_03_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:32:03,2613f176-4fee-4009-b00c-b49144d28302,OneShotCoreAgent,creature_battler_03,5,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_03_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:34:19,c0eafd8e-17ee-48f1-80f6-7120ff049258,OneShotCoreAgent,creature_battler_03,7,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_03_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:34:47,37dde436-c34e-4e2d-8aa5-03e2a8e2472e,OneShotCoreAgent,creature_battler_03,6,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_03_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:36:44,156961c7-c26d-4bac-b4e0-c26912944f4d,OneShotCoreAgent,creature_battler_04,1,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_04_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:37:28,52520c2e-e8e5-4b21-9166-c4d73c1109cb,OneShotCoreAgent,creature_battler_04,2,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_04_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:39:13,4e40a125-49ea-434e-a818-39b0add224e0,OneShotCoreAgent,creature_battler_04,3,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_04_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:39:14,a2e6073e-cf75-468b-b9e1-37823c3c68e2,OneShotCoreAgent,creature_battler_04,4,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_04_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:42:01,a745ce52-9187-4693-82af-cb40618f1af0,OneShotCoreAgent,creature_battler_04,6,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_04_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:42:36,e599e319-ce79-4fdb-a49b-f5beae293505,OneShotCoreAgent,creature_battler_04,5,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_04_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:45:26,69b79990-74e6-4cdd-b555-1ccf297d9e53,OneShotCoreAgent,creature_battler_04,7,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_04_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:47:15,2c3131eb-68e1-4000-a272-23f7bb16c2b0,OneShotCoreAgent,creature_battler_05,1,failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 9 damage!""}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird used Tackle!""}
Default Player's Dumbird took 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player's Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 1 damage!""}
Default Player swapped to Bubwool!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:17: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:27: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 6 damage!""}
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard used Tackle!""}
Default Player's Bubwool took 8 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 7 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'is_physical'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'is_physical'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 274, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 119, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 9 damage!""}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird used Tackle!""}
Default Player's Dumbird took 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player's Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 1 damage!""}
Default Player swapped to Bubwool!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:17: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:27: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 6 damage!""}
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard used Tackle!""}
Default Player's Bubwool took 8 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 7 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'is_physical'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'is_physical'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 95, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 9 damage!""}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird used Tackle!""}
Default Player's Dumbird took 5 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player's Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 1 damage!""}
Default Player swapped to Bubwool!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:17: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:27: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.battle_loop()
main_game/scenes/main_game_scene.py:38: in battle_loop
    self.resolve_turn()
main_game/scenes/main_game_scene.py:100: in resolve_turn
    self.resolve_attack(player, target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
attacker = Basic Opponent, skill = None

    def resolve_attack(self, attacker, skill):
        defender = self.player if attacker == self.opponent else self.opponent
        defender_creature = defender.active_creature
    
>       if skill.is_physical:
E       AttributeError: 'NoneType' object has no attribute 'is_physical'

main_game/scenes/main_game_scene.py:116: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard took 6 damage!""}
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Scizard used Tackle!""}
Default Player's Bubwool took 8 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player's Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': ""Basic Opponent's Dumbird took 7 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'is_physical'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'is_physical'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_05_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:50:06,30423267-5833-410a-adca-be9214a69e58,OneShotCoreAgent,creature_battler_05,2,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_05_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:50:49,31906a29-f261-4494-801f-f83a8b517583,OneShotCoreAgent,creature_battler_05,3,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_05_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:54:09,adb195f2-ce39-4e27-897f-b7bda22e9cd6,OneShotCoreAgent,creature_battler_05,4,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_05_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:54:21,58b8d504-a1a9-402f-bef2-91669e10060a,OneShotCoreAgent,creature_battler_05,5,failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            opponent = app.create_bot(""basic_opponent"")
            main_game_scene = MainGameScene(app, player)
            main_game_scene = MainGameScene(app, player)
            main_game_scene.opponent = opponent
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Default Player swapped to Bubwool!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Basic Opponent wins the battle!
Battle has ended!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 5 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Dumbird took 5 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Default Player swapped to Dumbird!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Basic Opponent wins the battle!
Battle has ended!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'hp'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'hp'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 274, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 119, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            opponent = app.create_bot(""basic_opponent"")
            main_game_scene = MainGameScene(app, player)
            main_game_scene = MainGameScene(app, player)
            main_game_scene.opponent = opponent
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Default Player swapped to Bubwool!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Basic Opponent wins the battle!
Battle has ended!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 5 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Dumbird took 5 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Default Player swapped to Dumbird!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Basic Opponent wins the battle!
Battle has ended!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'hp'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'hp'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 95, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: metadata-3.1.1, anyio-4.6.2.post1, Faker-30.6.0, timeout-2.3.1, time-machine-2.16.0, html-3.2.0, asyncio-0.23.8, sugar-0.9.7, cov-4.1.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30  # Increased to 30 for more complex scene
    
            player = app.create_player(f""player_{i}"")
            opponent = app.create_bot(""basic_opponent"")
            main_game_scene = MainGameScene(app, player)
            main_game_scene = MainGameScene(app, player)
            main_game_scene.opponent = opponent
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Default Player swapped to Bubwool!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Basic Opponent wins the battle!
Battle has ended!
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:586: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:430: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:702: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:746: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:39: in run
    self._end_battle()
main_game/scenes/main_game_scene.py:151: in _end_battle
    choice = self._wait_for_choice(self.player, [return_button])
../../../../mge2/mini_game_engine/engine/lib.py:412: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:307: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            player_creature = self.player.active_creature
            opponent_creature = self.opponent.active_creature
            return f""""""===Battle===
    Turn: {self.turn_counter}
    
    {self.player.display_name}'s {player_creature.display_name if player_creature else 'No active creature'}:
>   HP: {player_creature.hp}/{player_creature.max_hp if player_creature else 'N/A'}
    
    {self.opponent.display_name}'s {opponent_creature.display_name if opponent_creature else 'No active creature'}:
    HP: {opponent_creature.hp}/{opponent_creature.max_hp if opponent_creature else 'N/A'}
    
    > Attack
    > Swap
    """"""
E   AttributeError: 'NoneType' object has no attribute 'hp'

main_game/scenes/main_game_scene.py:19: AttributeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 5 damage!'}
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Default Player swapped to Dumbird!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Dumbird took 5 damage!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Dumbird used Tackle!'}
Bubwool took 4 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Default Player swapped to Dumbird!
Default Player swapped to Bubwool!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Dumbird!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 9 damage!'}
BotListener:on_show_event:show_text: {'text': 'Dumbird fainted!'}
BotListener:on_show_event:show_text: {'text': 'Basic Opponent swapped to Scizard!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
Bubwool fainted!
Default Player swapped to Dumbird!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Dumbird took 9 damage!
Dumbird fainted!
Basic Opponent wins the battle!
Battle has ended!
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'NoneType' object has no attribute 'hp'
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AttributeError: 'NoneType' object has no attribute 'hp'
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_05_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:58:52,719d47e8-89c9-4d1c-a70d-a242219b8630,OneShotCoreAgent,creature_battler_05,7,success,,,['new_prompt_logs/999929_115955_OneShotCoreAgent'],ladder/creature_battler_05_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
2024-10-19 14:59:04,cab496ca-b4c4-4888-92ec-c5aaad9f3311,OneShotCoreAgent,creature_battler_05,6,success,,,['new_prompt_logs/999930_578734_OneShotCoreAgent'],ladder/creature_battler_05_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/ecf76438768fd6dcd0187ce1a7eacda08e29cd15/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py,mge2_game
