timestamp,run_id,agent_id,ladder,run,status,error,traceback,one_shot_core_status,one_shot_core_error,one_shot_core_traceback,one_shot_view_status,one_shot_view_error,one_shot_view_traceback,logs,project_directory,commit_url,branch_name,project_type,override_model,strong_completion_model,base_chat_completion_model,fast_chat_completion_model,strong_coding_completion_model
2025-01-01 14:18:10,c81fe722-6395-4d63-a988-e51ff1f9209e,OneShotCoreAgent_OneShotView,creature_battler_01,2,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            with patch.object(MainGameScene, '_show_text') as mock_show_text:
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:22: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self._transition_to_scene(""MainMenuScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:24: in run
    self._quit_whole_game()
../../../../mge2/mini_game_engine/engine/lib.py:459: in _quit_whole_game
    self._app.quit_whole_game()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>

    def quit_whole_game(self):
        self.terminated = True
>       raise AbstractApp._QuitWholeGame()
E       mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught

../../../../mge2/mini_game_engine/engine/lib.py:625: _QuitWholeGame
----------------------------- Captured stdout call -----------------------------
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.lib.AbstractApp._QuitWholeGame: Game terminated gracefully. If you intended to quit the game, this exception is expected and should be caught
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_01_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:08,c19e9f7d-f0ba-4914-b7d1-6e9b84fa8572,OneShotCoreAgent_OneShotView,creature_battler_01,5,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 212ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 212ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 212ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 212ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:11,474f5f5a-c1b4-491d-9b9e-2c0119317241,OneShotCoreAgent_OneShotView,creature_battler_01,1,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 185ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 185ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 185ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 185ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:16,563702db-89da-4a21-8d1e-a5c0c7992c09,OneShotCoreAgent_OneShotView,creature_battler_01,3,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 195ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 195ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 195ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 195ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:18,9e1a7553-5f0e-418a-b109-4bb47b5799fd,OneShotCoreAgent_OneShotView,creature_battler_01,6,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 200ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 200ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 200ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 200ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:20,cc430d33-1559-4b5c-b6c8-ab9c60b5e5f4,OneShotCoreAgent_OneShotView,creature_battler_02,2,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:31,1f894c13-9fae-4e8b-912c-a841e75b6c66,OneShotCoreAgent_OneShotView,creature_battler_02,1,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 209ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 209ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 209ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 209ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:19:42,4cddedcd-53e2-4df2-82ba-90b7ed3760fc,OneShotCoreAgent_OneShotView,creature_battler_01,7,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 193ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 193ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 193ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 193ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:20:48,fcc975a1-fd11-463c-be31-e418138b4c21,OneShotCoreAgent_OneShotView,creature_battler_03,3,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Lick dealing 2 damage!
Scizard used Tackle dealing 4 damage!
Bubwool used Tackle dealing 3 damage!
Scizard used Fireball dealing 3 damage!
Bubwool used Lick dealing 2 damage!
Scizard used Fireball dealing 3 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_03_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:21:01,f1f8e375-befa-4e5f-8e0b-2ed10bda033b,OneShotCoreAgent_OneShotView,creature_battler_02,4,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:21:38,e577608c-f1d5-4eb9-aa05-40b296e56095,OneShotCoreAgent_OneShotView,creature_battler_02,6,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:21:40,e513a935-eac0-474b-9621-355d9cfc2ce9,OneShotCoreAgent_OneShotView,creature_battler_02,5,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 62, in file_lock
    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
BlockingIOError: [Errno 11] Resource temporarily unavailable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:22:11,8a5e2da4-df77-4b85-933d-0d3e255537b5,OneShotCoreAgent_OneShotView,creature_battler_02,7,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 184ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:22:18,c0e62f54-dd9d-4ecb-a117-5448fd48f173,OneShotCoreAgent_OneShotView,creature_battler_03,6,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py .                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_03_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:22:20,0a520843-184e-4540-88ef-69539a5d6834,OneShotCoreAgent_OneShotView,creature_battler_03,1,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Tackle! It dealt 3 damage.
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Bubwool used Tackle! It dealt 3 damage.
Scizard used Fireball! It dealt 1 damage.
Bubwool used Tackle! It dealt 3 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
Scizard used Tackle! It dealt 4 damage.
Bubwool used Lick! It dealt 4 damage.
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_03_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:22:38,e5679d1e-bcde-40b1-a797-729fba3e490c,OneShotCoreAgent_OneShotView,creature_battler_03,2,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_03_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:22:48,805eb234-3def-43b6-98e5-a00433c18754,OneShotCoreAgent_OneShotView,creature_battler_03,4,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 183ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 183ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 183ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 183ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_03_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:24:06,141ce803-1695-465e-94f1-7c7e7b078927,OneShotCoreAgent_OneShotView,creature_battler_03,7,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_03_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:24:09,2a42a46a-2718-43f4-82c4-e1a925c01a06,OneShotCoreAgent_OneShotView,creature_battler_04,5,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
You lost the battle!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_04_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:24:14,55fccdb8-46f7-44a3-b954-bfce4636f21f,OneShotCoreAgent_OneShotView,creature_battler_04,3,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_04_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:24:18,4af3fd0d-8097-4f8f-93cb-fe63b2f4e65a,OneShotCoreAgent_OneShotView,creature_battler_04,1,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 69ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 69ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 69ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 69ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_04_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:24:23,2fdc80fa-bc16-41c7-96e8-dd4e46b911aa,OneShotCoreAgent_OneShotView,creature_battler_04,2,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
                    main_game_scene.run()
                except TransitionFromScene:
                    pass
                except RandomModeGracefulExit:
                    pass
                else:
>                   assert mock_transition.called or mock_quit.called
E                   AssertionError: assert (False or False)
E                    +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
E                    +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called

main_game/tests/test_main_game_scene.py:36: AssertionError
----------------------------- Captured stdout call -----------------------------
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:18: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:31: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.main.App object at 0x[REDACTED]>, scene_id = 'MainGameScene'
transition_to_scene = None, kwargs = {'player': Default Player}
settings = Settings(env='LOCAL', redis_host='localhost', redis_port=6379, redis_secure_auth='', enable_persistence=False, enable_... enable_leaderboard_persistence=False, supabase_url='', supabase_key='', supabase_jwt_secret='', game_id='volter-game')

        def transition_to_scene(self, scene_id: str, transition_to_scene: Optional[AbstractGameScene] = None, **kwargs):
            try:
                settings = get_settings()
                if settings.enable_persistence:
                    saved_data = self.persistence_client.retrieve(kwargs.get('player'))
                    if saved_data:
                        print(""---> Fetching data"", saved_data)
                        dehydrated_scene_stack, next_scene_name = saved_data
                        if next_scene_name:
                            new_scene_stack = []
                            for dehydrated_scene in dehydrated_scene_stack:
                                scene_kwargs = {**dehydrated_scene}
                                del scene_kwargs[""__type""]
                                new_scene = self.scene_registry.get(dehydrated_scene[""__type""]).model_validate({
                                    **scene_kwargs,
                                    **kwargs
                                })
                                new_scene_stack.append(new_scene)
                            self._scene_stack = new_scene_stack
                            for _scene in self._scene_stack:
                                _scene.player = kwargs.get('player')
                            scene_id = next_scene_name
    
                scene_factory = self.scene_registry[scene_id]
            except KeyError as e:
                raise Exception(f""The scene {scene_id} is not registered, ""
                                f""all scenes should be registered using `register_scene` before `app.run()`"") from e
    
            if issubclass(scene_factory, AbstractMultiplayerScene):
                if kwargs.get(""player"") is not None:
                    raise Exception(""player argument cannot be used on a multiplayer scene, you must use 'players'"")
                if kwargs.get(""players"") is None:
                    raise Exception(""players argument must be set on a multiplayer scene"")
            scene = transition_to_scene
    
            if not scene:
                scene: AbstractGameScene = scene_factory(app=self, **kwargs)
    
            self.__run_scene(scene)
    
            # Technically the code can never reach this
>           raise FixableException(f""""""
    Scene ({scene.__class__.__name__}) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This
    probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.
    Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling
    `quit_whole_game` to signal that the game has ended.
    """""")
E   common.exceptions.FixableException: 
E   Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
E   probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
E   Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
E   `quit_whole_game` to signal that the game has ended.

../../../../mge2/mini_game_engine/engine/lib.py:748: FixableException
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 1
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 2
broadcast: {'__type': 'OnGameEnd'}
game exited gracefully
starting random run iteration 3
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Tackle dealing 5 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Fireball dealing 2 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
Player's Bubwool uses Lick dealing 6 damage!
BotListener:on_show_event:show_text: {'text': ""Opponent's Scizard uses Tackle dealing 8 damage!""}
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AssertionError: assert (False or False)
 +  where False = <MagicMock name='_transition_to_scene' id='[REDACTED]'>.called
 +  and   False = <MagicMock name='_quit_whole_game' id='[REDACTED]'>.called
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - common.exceptions.FixableException: 
Scene (MainGameScene) terminated without calling `quit_whole_game` or `transition_to_scene` again.  This 
probably indicates that you have returned directly or broke from the scene's game loop, which is an antipattern.  
Consider transitioning to the appropriate scene, or alternatively if this is the end of the game, calling 
`quit_whole_game` to signal that the game has ended.
========================= 2 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_04_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:25:12,606ab938-ab96-4992-ad0f-5382b293f0b6,OneShotCoreAgent_OneShotView,creature_battler_01,4,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_01_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:25:21,8eaf2227-5419-48fa-8a34-e740c4ef88b8,OneShotCoreAgent_OneShotView,creature_battler_05,2,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py .                                [ 66%]
main_game/tests/test_whole_game.py .                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
            player = app.create_player(f""player_{i}"")
            main_game_scene = MainGameScene(app, player)
    
            class TransitionFromScene(Exception):
                pass
    
            def exit_scene(*args, **kwargs):
                raise TransitionFromScene()
    
            with patch.object(MainGameScene, '_transition_to_scene', side_effect=exit_scene) as mock_transition, \
                    patch.object(MainGameScene, '_quit_whole_game') as mock_quit:
    
                try:
>                   main_game_scene.run()

main_game/tests/test_main_game_scene.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/scenes/main_game_scene.py:26: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:34: in player_choice_phase
    choice = self._wait_for_choice(self.player, choices)
../../../../mge2/mini_game_engine/engine/lib.py:444: in _wait_for_choice
    choice = player._listener.on_wait_for_choice(self, choices)
../../../../mge2/mini_game_engine/engine/lib.py:339: in on_wait_for_choice
    assert str(scene)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>

        def __str__(self):
            return f""""""===Main Game===
    Player: {self.player.display_name}
>   Active Creature: {self.player.active_creature.display_name} (HP: {self.player.active_creature.hp}/{self.player.active_creature.max_hp})
    
    Bot: {self.bot.display_name}
    Active Creature: {self.bot.active_creature.display_name} (HP: {self.bot.active_creature.hp}/{self.bot.active_creature.max_hp})
    
    Choose your action:
    1. Attack
    2. Swap
    """"""
E   AttributeError: 'SelectThing' object has no attribute 'display_name'

main_game/scenes/main_game_scene.py:14: AttributeError
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - AttributeError: 'SelectThing' object has no attribute 'display_name'
========================= 1 failed, 2 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_2/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:25:27,525a65b0-7f85-4bb2-a617-29d1b5c6d9a0,OneShotCoreAgent_OneShotView,creature_battler_05,3,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
main_game/models.py:29: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Default Player
data = {'category': 'Player', 'creatures': ['bubwool', 'dumbird'], 'display_name': 'Default Player', 'prototype_id': 'default_player'}
fields = {'_listener': <class 'mini_game_engine.engine.lib.AbstractPlayerListener'>, 'active_creature': 'Creature', 'category': 'str', 'creatures': 'List[Creature]', ...}
cls = <class 'main_game.models.Player'>, name = 'active_creature'
field_type = <class 'main_game.models.Creature'>
natural_type = <class 'main_game.models.Creature'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'active_creature': [""constructor for Player is missing variable `active_creature=<class 'main_game.models.Creature'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:25:53,e7d2b678-1120-4a4a-aece-d58516f03bc7,OneShotCoreAgent_OneShotView,creature_battler_04,4,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_04_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:26:01,a499a0f7-1ef5-4798-ab98-64c8708594ad,OneShotCoreAgent_OneShotView,creature_battler_02,3,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 181ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 181ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 181ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 181ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_02_3/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:26:19,0fb18bc3-1abb-45cb-8fe7-fa06664f60be,OneShotCoreAgent_OneShotView,creature_battler_05,5,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 3 items

main_game/tests/test_main_game_scene.py F                                [ 33%]
main_game/tests/test_main_menu_scene.py F                                [ 66%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
__________ TestMainGameSceneRandomRun.test_main_game_scene_random_run __________

self = <tests.test_main_game_scene.TestMainGameSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_game_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 30
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_game_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
__________ TestMainMenuSceneRandomRun.test_main_menu_scene_random_run __________

self = <tests.test_main_menu_scene.TestMainMenuSceneRandomRun object at 0x[REDACTED]>
app = <main_game.main.App object at 0x[REDACTED]>

    def test_main_menu_scene_random_run(self, app):
        for i in range(10):
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 10
    
>           player = app.create_player(f""player_{i}"")

main_game/tests/test_main_menu_scene.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
>           human_player = app.create_player(""HumanPlayer"")

main_game/tests/test_whole_game.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main_game/main.py:14: in create_player
    player = Player.from_prototype_id(prototype_id=""default_player"")
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in __init__
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:74: in <listcomp>
    value = [self._init_nested(item_type, item) for item in value]
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:95: in _init_nested
    return field_type.from_prototype_id(value)
../../../../mge2/mini_game_engine/engine/lib.py:159: in from_prototype_id
    return cls._create_from_data(data)
../../../../mge2/mini_game_engine/engine/lib.py:203: in _create_from_data
    return cls(**new_data)
../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:338: in __init__
    super().__init__(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.models.Skill object at 0x[REDACTED]>
data = {'base_damage': 7, 'category': 'Skill', 'is_physical': True, 'prototype_id': 'tackle', ...}
fields = {'base_damage': 'int', 'category': 'str', 'description': <class 'str'>, 'display_name': <class 'str'>, ...}
cls = <class 'main_game.models.Skill'>, name = 'display_name'
field_type = <class 'str'>, value = None, field = None

    def __init__(self, **data):
        fields = {}
        for cls in reversed(self.__class__.__mro__):
            fields.update(cls.__annotations__ if hasattr(cls, '__annotations__') else {})
    
        for name, field_type in fields.items():
            if isinstance(field_type, str):
                natural_type = (get_type_hints(self.__class__).get(name))
                field_type = natural_type
    
            if name.startswith('__') and name.endswith('__'):
                continue
    
            if name.startswith('_'):
                continue
    
            value = data.get(name)
            field = getattr(self.__class__, name, None)
    
            if isinstance(field, Field):
                if value is None:
                    if field.default is not None:
                        value = field.default
                    elif field.default_factory is not None:
                        value = field.default_factory()
    
                if field.alias and field.alias in data:
                    value = data[field.alias]
    
            is_optional = get_origin(field_type) is Union and type(None) in get_args(field_type)
    
            if value is None and name not in data:
                default_value = getattr(self.__class__, name, None)
                if default_value is None and not isinstance(field, Field) and not is_optional:
>                   raise ValidationError({name: [f""constructor for {self.__class__.__name__} is missing variable `{name}={field_type}`""]})
E                   mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}

../../../../mge2/mini_game_engine/engine/new_mydantic/mydantic.py:60: ValidationError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
=========================== short test summary info ============================
FAILED main_game/tests/test_main_game_scene.py::TestMainGameSceneRandomRun::test_main_game_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_main_menu_scene.py::TestMainMenuSceneRandomRun::test_main_menu_scene_random_run - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - mini_game_engine.engine.new_mydantic.mydantic.ValidationError: Validation error: {'display_name': [""constructor for Skill is missing variable `display_name=<class 'str'>`""]}
============================== 3 failed in [REDACTED]s ===============================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:26:29,e5cf0a6a-959f-4474-8c4c-cb58a5b5b9a4,OneShotCoreAgent_OneShotView,creature_battler_04,6,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 177ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 177ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 177ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 177ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_04_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:26:45,174bafce-f3a4-47ed-b389-007a7329a65a,OneShotCoreAgent_OneShotView,creature_battler_04,7,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 180ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_04_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:26:53,edb64258-3aca-49ee-b2d8-6749e8be2520,OneShotCoreAgent_OneShotView,creature_battler_05,6,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:23: in run
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:22: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:61: in swap_phase
    choice = self._wait_for_choice(player, creature_choices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_6/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:27:45,84477f78-21cc-4eba-a0ac-8bc9d5682831,OneShotCoreAgent_OneShotView,creature_battler_05,4,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 179ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_05_4/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:28:52,fdd5b256-886f-404e-ad93-a730a7dc0a08,OneShotCoreAgent_OneShotView,creature_battler_05,7,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:23: in run
    self.player_choice_phase()
main_game/scenes/main_game_scene.py:37: in player_choice_phase
    self.player_action = self.swap_phase(self.player)
main_game/scenes/main_game_scene.py:76: in swap_phase
    chosen_creature = self._wait_for_choice(player, creature_choices).thing
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player = Default Player, choices = []

    def _wait_for_choice(self, player: AbstractPlayer, choices: List[AbstractChoice]) -> AbstractChoice:
>       assert len(choices) > 0, ""`_wait_for_choice` was called with no choices""
E       AssertionError: `_wait_for_choice` was called with no choices

../../../../mge2/mini_game_engine/engine/lib.py:424: AssertionError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Dumbird took 7 damage!'}
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
Bubwool used Lick!
BotListener:on_show_event:show_text: {'text': 'Scizard took 6 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Bubwool took 2 damage!
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Dumbird used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 1 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Fireball!'}
Dumbird took 13 damage!
Bubwool used Tackle!
BotListener:on_show_event:show_text: {'text': 'Scizard took 5 damage!'}
BotListener:on_show_event:show_text: {'text': 'Scizard used Tackle!'}
Bubwool took 8 damage!
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - AssertionError: `_wait_for_choice` was called with no choices
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_7/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:30:27,a165b980-c82e-40e1-8cb6-14451acfdd23,OneShotCoreAgent_OneShotView,creature_battler_03,5,failure,"
$ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","
Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",success,,,failure,"$ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py"", line 63, in execute
    await self.sdk.execute_as_task(ViewComponentAuthor)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 42, in execute
    result = await self._exec()
             ^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/view/view_component_author.py"", line 146, in _exec
    await build_ui(project_structure, sdk=self.sdk)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 92, in build_ui
    await sdk.execute_as_task(BuildAgent, dest_path=dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 81, in execute
    build_ui_wrapped(self.sdk.project_structure, self.dest_path)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_structure/mge_utils.py"", line 173, in build_ui_wrapped
    raise FixableException(result.stderr)
common.exceptions.FixableException: $ tsc; vite build;
[31mx[39m Build failed in 178ms
[31merror during build:
[31mCould not resolve ""./App"" from ""src/main.tsx""[31m
file: [36m/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/src/main.tsx[31m
    at getRollupError (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:395:41)
    at error (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/parseAst.js:391:42)
    at ModuleLoader.handleInvalidResolvedId (file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:20006:24)
    at file:///home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/game-ui/node_modules/rollup/dist/es/shared/node-entry.js:19966:26[39m
error: script ""build"" exited with code 1

",[],ladder/creature_battler_03_5/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
2025-01-01 14:37:51,df5f29e5-d1c6-48a5-b8e6-d7b3ff51b01e,OneShotCoreAgent_OneShotView,creature_battler_05,1,skipped,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",failure,"After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1
","Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 72, in execute
    await self.sdk.execute_as_task(PytestRunnerAgent, verbose=False)
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/volter-common/common/sdk/SDK.py"", line 255, in execute_as_task
    response = await agent.execute()
               ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/game/pytest_runner_agent/logic.py"", line 30, in execute
    output = run_pytest(test_file_path, project_root=self.sdk.project_directory, verbose=self.verbose)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-std-agents/agent_lib/random_run_utils.py"", line 141, in run_pytest
    raise AssertionError(f""Pytest failed with exit code {exit_code}. Output:\n{output}"")
AssertionError: Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_bench/bench_utils.py"", line 93, in execute_agent
    asyncio.run(agent.execute())
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/runners.py"", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py"", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File ""/home/runner/_work/volter-monorepo/volter-monorepo/volter-monorepo/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_core.py"", line 79, in execute
    raise FixableException(
common.exceptions.FixableException: After 5 attempts to debug, could not create a bug-free game. Still have error Pytest failed with exit code 1. Output:
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-7.3.1, pluggy-1.5.0
rootdir: [REDACT]/volter-monorepo/packages/lib-volter-mge2
configfile: pytest.ini
plugins: html-3.2.0, sugar-0.9.7, timeout-2.3.1, cov-4.1.0, asyncio-0.23.8, time-machine-2.16.0, metadata-3.1.1, anyio-4.7.0, Faker-30.10.0
asyncio: mode=Mode.STRICT
collected 2 items

main_game/tests/test_main_menu_scene.py .                                [ 50%]
main_game/tests/test_whole_game.py F                                     [100%]

=================================== FAILURES ===================================
_____________________ test_full_game_flow_random_with_bots _____________________

    def test_full_game_flow_random_with_bots():
        for i in range(10):
            print(f""starting random run iteration {i}"")
            HumanListener.random_mode = True
            HumanListener.random_mode_counter = 100  # 100 moves suffice for running through some common scenarios in the game
            App.matchmaking_wait_time = 0
            original_wait_time = App.matchmaking_wait_time
    
            app = App()
    
            # Create a human player
            human_player = app.create_player(""HumanPlayer"")
            human_player.set_listener(HumanListener())
    
            try:
>               app.run(human_player)

main_game/tests/test_whole_game.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../mge2/mini_game_engine/engine/lib.py:629: in run
    self.transition_to_scene(self.entry_point_scene_id, player=player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_menu_scene.py:16: in run
    self.game_loop()
main_game/scenes/main_menu_scene.py:26: in game_loop
    self._transition_to_scene(""MainGameScene"")
../../../../mge2/mini_game_engine/engine/lib.py:462: in _transition_to_scene
    self._app.transition_to_scene(scene_name, player=self.player)
../../../../mge2/mini_game_engine/engine/lib.py:745: in transition_to_scene
    self.__run_scene(scene)
../../../../mge2/mini_game_engine/engine/lib.py:789: in __run_scene
    scene.run()
main_game/scenes/main_game_scene.py:25: in run
    self.resolution_phase(player_action, bot_action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <main_game.scenes.main_game_scene.MainGameScene object at 0x[REDACTED]>
player_action = {'creature': <main_game.models.Creature object at 0x[REDACTED]>, 'type': 'swap'}
bot_action = None

    def resolution_phase(self, player_action, bot_action):
        # Resolve actions based on speed or swap priority
        if player_action['type'] == 'swap':
            self.player.active_creature = player_action['creature']
>       if bot_action['type'] == 'swap':
E       TypeError: 'NoneType' object is not subscriptable

main_game/scenes/main_game_scene.py:58: TypeError
----------------------------- Captured stdout call -----------------------------
starting random run iteration 0
broadcast: {'__type': 'OnGameStart'}
=========================== short test summary info ============================
FAILED main_game/tests/test_whole_game.py::test_full_game_flow_random_with_bots - TypeError: 'NoneType' object is not subscriptable
========================= 1 failed, 1 passed in [REDACTED]s ==========================
PYTEST_EXIT_CODE: 1

",skipped,,,[],ladder/creature_battler_05_1/main_game,https://github.com/volter-ai/volter-monorepo/blob/bf654c6aae6aea8dfb5ab603453698f56a90cfbf/packages/lib-volter-mge2/mge_agents/internal/one_shot_gen/one_shot_view.py,main,mge2_game,,gpt-4o,gpt-4o,gpt-4o-mini,claude-3-5-sonnet-20240620
